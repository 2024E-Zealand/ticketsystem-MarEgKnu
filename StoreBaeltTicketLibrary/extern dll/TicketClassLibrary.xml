<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicketClassLibrary</name>
    </assembly>
    <members>
        <member name="T:TicketClassLibrary.Car">
            <summary>
            This class represents a car object
            </summary>
        </member>
        <member name="M:TicketClassLibrary.Car.#ctor(System.String,System.DateTime,System.Boolean)">
            <summary>
            Constructor for a car object, must provide a valid licence number and date
            </summary>
            <param name="licencePlate">The licence number of the car</param>
            <param name="date">The DateTime representing the time the ticket was purchased</param>
            <param name="broBizz">Whether or not the ticket should have BroBizz discount enabled</param>
        </member>
        <member name="M:TicketClassLibrary.Car.#ctor">
            <summary>
            Default constructor for a car object, will give the car some predetermined default values
            </summary>
        </member>
        <member name="M:TicketClassLibrary.Car.PriceNoDiscount">
            <inheritdoc/>
        </member>
        <member name="M:TicketClassLibrary.Car.Price">
            <inheritdoc/>
        </member>
        <member name="M:TicketClassLibrary.Car.VehicleType">
            <inheritdoc/>
        </member>
        <member name="T:TicketClassLibrary.Helpers.LicencePlateValidator">
            <summary>
            Static class with methods to validate licencePlates
            </summary>
        </member>
        <member name="M:TicketClassLibrary.Helpers.LicencePlateValidator.ValidateLicencePlate(System.String)">
            <summary>
            Validates the input string as a licence plate.
            The method does not return anything, but will throw an appropriate exception if the string does not conform to licence plate standards
            </summary>
            <param name="licencePlate"></param>
            <exception cref="T:System.ArgumentNullException">Throws if the licence plate is null</exception>
            <exception cref="T:System.ArgumentException">Throws if the licence plate is not 7 characters</exception>
        </member>
        <member name="T:TicketClassLibrary.MC">
            <summary>
            This class represents a MC vehicle object
            </summary>
        </member>
        <member name="M:TicketClassLibrary.MC.#ctor(System.String,System.DateTime,System.Boolean)">
            <summary>
            Constructor for a MC object, must provide a valid licence number and date
            </summary>
            <param name="licencePlate">The licence number of the MC</param>
            <param name="date">The DateTime representing the time the ticket was purchased</param>
            <param name="broBizz">Whether or not the ticket should have BroBizz discount enabled</param>
        </member>
        <member name="M:TicketClassLibrary.MC.#ctor">
            <summary>
            Default constructor for a MC object, will give the MC some predetermined default values
            </summary>
        </member>
        <member name="M:TicketClassLibrary.MC.PriceNoDiscount">
            <inheritdoc/>
        </member>
        <member name="M:TicketClassLibrary.MC.Price">
            <inheritdoc/>
        </member>
        <member name="M:TicketClassLibrary.MC.VehicleType">
            <inheritdoc/>
        </member>
        <member name="M:TicketClassLibrary.Vehicle.#ctor(System.String,System.DateTime,System.Boolean)">
            <summary>
            Constructor for a the base vehicle, must provide a valid licence number and date
            </summary>
            <param name="licencePlate">The licence number</param>
            <param name="date">The DateTime representing the time the ticket was purchased</param>
            <param name="broBizz">Whether or not the ticket should have BroBizz discount enabled</param>
        </member>
        <member name="P:TicketClassLibrary.Vehicle.BroBizz">
            <summary>
            Represents wherther or not the given ticket has BroBizz discount
            </summary>
        </member>
        <member name="P:TicketClassLibrary.Vehicle.LicencePlate">
            <summary>
            Represents the licence plate for the vehicle as a string
            </summary>
        </member>
        <member name="P:TicketClassLibrary.Vehicle.Date">
            <summary>
            The DateTime representing the time the ticket was purchased
            </summary>
        </member>
        <member name="M:TicketClassLibrary.Vehicle.Price">
            <summary>
            Returns the price of the ticket, including discounts
            </summary>
            <returns>A double representing the price</returns>
        </member>
        <member name="M:TicketClassLibrary.Vehicle.PriceNoDiscount">
            <summary>
            Returns the price of the ticket, excluding discounts
            </summary>
            <returns>A double representing the price</returns>
        </member>
        <member name="M:TicketClassLibrary.Vehicle.VehicleType">
            <summary>
            Returns the vehicle type as a string
            </summary>
            <returns>A string represneation of the vehicle type</returns>
        </member>
    </members>
</doc>
